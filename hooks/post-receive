#!/bin/bash
#
# Hook script for the "post-receive" event.
#
# The "post-receive" script is run after receive-pack has accepted a pack
# and the repository has been updated.
# 
#
# copy action:
#       Checkout the files under destination directory.
#
# scp action:
#       Bad Logic.
#       Copy all the files to target server with scp command.
#       Can not remove the "git removed files".
#
# ftp action:
#       Bad Logic.
#       Copy all the files to target server with ncftpput command.
#       Can not remove the "git removed files".
#
# Read post-receive action definitions from ../etc/post-receive.ini file.
#
# This script contains cfg_parser function, which is part of the "Drupal Deployment Skeleton".
#       https://github.com/fluxsauce/DrupalDeploySkel
#
#############
# MIT license
#
# Copyright (c) 2014 Yoshinari Toda
#   https://github.com/yoshinari/gitPostRecieveHookScript
#
# Drupal Deployment Skeleton (excluding contributed code) is 
# Copyright (c) 2011 Jon Peck and FluxSauce
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
# SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
# OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

function cfg_parser (){
        ini="$(<$1)"                # read the file
        ini="${ini//[/\[}"          # escape [
        ini="${ini//]/\]}"          # escape ]
        IFS=$'\n' && ini=( ${ini} ) # convert to line-array
        ini=( ${ini[*]//;*/} )      # remove comments with ;
        ini=( ${ini[*]/\    =/=} )  # remove tabs before =
        ini=( ${ini[*]/=\   /=} )   # remove tabs be =
        ini=( ${ini[*]/\ =\ /=} )   # remove anything with a space around =
        ini=( ${ini[*]/#\\[/\}$'\n'cfg.section.} ) # set section prefix
        ini=( ${ini[*]/%\\]/ \(} )    # convert text2function (1)
        ini=( ${ini[*]/=/=\( } )    # convert item to array
        ini=( ${ini[*]/%/ \)} )     # close array parenthesis
        ini=( ${ini[*]/%\\ \)/ \\} ) # the multiline trick
        ini=( ${ini[*]/%\( \)/\(\) \{} ) # convert text2function (2)
        ini=( ${ini[*]/%\} \)/\}} ) # remove extra parenthesis
        ini[0]="" # remove first element
        ini[${#ini[*]} + 1]='}'    # add the last brace
        eval "$(echo "${ini[*]}")" # eval the result
}
echo "*** UPDATE ***"
read old_commit new_commit refname
branch=`echo $refname | cut -d/ -f3`    # master, develop, ...
echo "branch:" $branch
cfg_parser 'etc/post-receive.ini'
cfg.section.$branch
if [ "$mode" == "copy" ]; then
        GIT_WORK_TREE=$destination git checkout -f $branch
        echo "Changes pushed $branch under destination:$destination"
elif [ "$mode" == "scp" -o "$mode" == "ftp" ]; then
        #### BAD LOGIC SECTION
        gitFiles="/tmp/$(basename $0).$$.tmp"
        `mkdir ${gitFiles}`
        GIT_WORK_TREE=$gitFiles git checkout -f $branch
        if [ "$mode" == "scp" ]; then
                `scp -r $gitFiles/* $ssh_config:$destination`
                echo "All files pushed ${branch}'s server with scp command."
        else
                `ncftpput -u $userid -p $password -P $portNumber -t $timeout -m -R -r $retry $server $destination $gitFiles/*`
                echo "All files pushed ${branch}'s server with ncftpput command."
        fi
        `rm -rf ${gitFiles}`
else
        echo "** Rule does not defined for $branch , mode: $mode **"
fi